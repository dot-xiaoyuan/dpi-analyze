package config

import (
	"fmt"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
	"go.uber.org/zap"
	"os"
)

const EnvDevelopmentMode = "dev"
const EnvProductionMode = "prod"
const DevConfigFilename = "config/config.yaml"
const ProdConfigFilename = "/etc/config.prod.yaml"

var (
	Cfg  *Config
	Env  = pflag.StringP("env", "e", EnvDevelopmentMode, "environment name")
	File = pflag.StringP("config", "c", DevConfigFilename, "path to the config file")

	LogLevel           *string
	Debug              *bool
	CaptureNic         *string
	CaptureOfflineFile *string
	CaptureSnapLen     *int32
	UseMongo           *bool
)

// 配置加载管理

type Config struct {
	LogLevel string `mapstructure:"log_level"`
	Debug    bool   `mapstructure:"debug"`
	Capture  Capture
	Mongodb  Mongodb
}

func (c *Config) setDefault() {
	if c.LogLevel == "" {
		c.LogLevel = "info"
	}
	if c.Capture.SnapLen == 0 {
		c.Capture.SnapLen = 16 << 10
	}
}

func init() {
	// 加载配置
	err := LoadConfig()
	if err != nil {
		zap.L().Panic("Failed to load config:", zap.Error(err))
	}

	// 定义flag
	LogLevel = pflag.StringP("log", "l", Cfg.LogLevel, "log level [debug|info|warn|error]")
	Debug = pflag.BoolP("debug", "d", false, "enable debug mode")
	CaptureNic = pflag.StringP("nic", "n", Cfg.Capture.NIC, "capture nic")
	CaptureOfflineFile = pflag.StringP("pcap", "p", Cfg.Capture.OfflineFile, "capture offline file")
	CaptureSnapLen = pflag.Int32P("snap_len", "s", Cfg.Capture.SnapLen, "capture snap length")
	UseMongo = pflag.BoolP("use_mongo", "m", Cfg.Mongodb.Use, "use mongodb")

	pflag.Parse()

	if *Debug && *LogLevel != "debug" {
		*LogLevel = "debug"
	}
	fmt.Println("log level:", *LogLevel)
	os.Exit(0)
}

// LoadConfig 从yml配置
func LoadConfig() error {
	viper.SetConfigFile(*File)
	err := viper.ReadInConfig()
	if err != nil {
		return err
	}

	err = viper.Unmarshal(&Cfg)
	if err != nil {
		return err
	}
	// 默认值
	Cfg.setDefault()
	return nil
}

// TODO Change Event.
